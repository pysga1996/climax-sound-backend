buildscript {
    ext {
        springBootVersion = '2.4.0'
        springBootVersionRelease = '2.4.0.RELEASE'
        springCloudVersion = '2020.0.2'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("io.spring.gradle:dependency-management-plugin:1.0.10.RELEASE")
    }
}


plugins {
    id 'java'
    id 'org.springframework.boot' version '2.4.0'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'idea'
    id 'io.franzbecker.gradle-lombok' version '4.0.0'
    id "org.sonarqube" version "3.2.0"
}

sonarqube {
    properties {
        property "sonar.projectKey", "pysga1996_alpha-sound-service"
        property "sonar.organization", "pysga1996"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

group = 'com.vengeance'
version = '0.0.1-SNAPSHOT'

sourceCompatibility = 1.8

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    all*.exclude module: 'spring-boot-starter-logging'
    all*.exclude module: "logback-classic"
}

repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {
    implementation('org.springframework.boot:spring-boot-starter') {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
    implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap:3.0.1'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client:3.0.2'
    implementation 'org.springframework.cloud:spring-cloud-starter-config:2.2.7.RELEASE'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: "${springBootVersion}"
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-security', version: "${springBootVersion}"
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-cache', version: "${springBootVersion}"
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-redis', version: "${springBootVersion}"
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: "${springBootVersion}"
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: "${springBootVersion}"
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-hibernate5'
    implementation group: 'org.springframework.kafka', name: 'spring-kafka', version: '2.7.6'
    implementation group: 'org.springframework.data', name: 'spring-data-elasticsearch', version: '4.2.5'
    implementation group: 'org.springframework.security.oauth', name: 'spring-security-oauth2', version: "${springBootVersionRelease}"
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-oauth2-resource-server', version: "${springBootVersion}"
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-log4j2', version: "${springBootVersion}"

    implementation 'io.jsonwebtoken:jjwt:0.9.1'
    implementation 'com.cloudinary:cloudinary-http44:1.27.0'
    implementation 'com.google.firebase:firebase-admin:7.3.0'
    runtimeOnly group: 'org.mariadb.jdbc', name: 'mariadb-java-client', version: '3.1.4'
//    runtimeOnly 'org.postgresql:postgresql'

    compileOnly group: 'org.hibernate', name: 'hibernate-jpamodelgen', version: '5.5.7.Final'
    annotationProcessor 'org.hibernate:hibernate-jpamodelgen:5.5.7.Final'

    implementation 'org.mapstruct:mapstruct:1.3.1.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.3.1.Final'

    compileOnly 'org.projectlombok:lombok:1.18.18'
    annotationProcessor 'org.projectlombok:lombok:1.18.18'
    testCompileOnly 'org.projectlombok:lombok:1.18.18'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.18'

    implementation group: 'org.springframework.boot', name: 'spring-boot-configuration-processor', version: "${springBootVersion}"
    annotationProcessor group: 'org.springframework.boot', name: 'spring-boot-configuration-processor', version:"${springBootVersion}"

    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: "${springBootVersion}"
    testImplementation group: 'org.springframework.restdocs', name: 'spring-restdocs-mockmvc'
    testImplementation group: 'org.springframework.security', name: 'spring-security-test'
    testRuntimeOnly 'com.h2database:h2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
}

test {
    ignoreFailures = true
}

task stage(dependsOn: ['build', 'clean'])
build.mustRunAfter clean

task copyToLib(type: Copy) {
    into "$buildDir/libs"
    from(configurations.compile)
}

compileJava.inputs.files(processResources)

stage.dependsOn(copyToLib)

gradle.taskGraph.whenReady {
    taskGraph ->
        if (taskGraph.hasTask(stage)) {
            test.enabled = false
        }
}

idea {
    module {
        inheritOutputDirs = false
        outputDir = compileJava.destinationDir
        testOutputDir = compileTestJava.destinationDir
    }
}

